/* Generated by Babel */
// import * as $FILTER from '../FILTER.js'; // For Server Enviorments

"use strict";

var _templateObject = _taggedTemplateLiteral(["|"], ["|"]),
    _templateObject2 = _taggedTemplateLiteral([""], [""]);

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

$Plugin("PNGSteg", function ($IN, $OUT) {
    return new $Load($IN[0]).Submit($Buffer(function ($DATA) {
        $OUT.SetBuffer($DATA.length);

        // Helpers
        var FixedReduce = function FixedReduce(len, func, prev) {
            if (len === undefined) len = 0;
            if (func === undefined) func = function () {};
            return Array(len).fill().reduce(function (p, _, i, a) {
                return prev + func(i, a);
            }, prev);
        };

        // FILE CONSTANTS
        // Currently set to PNG Block data
        var LEN = 4;
        var TAG = 4;
        var PAD = 4;
        var RES = "IHDR|PLTE|IDAT|IEND|cHRM|gAMA|iCCP|sBIT|sRGB|bKGD|hIST|tRNS|pHYs|sPLT|tIME|iTXt|tEXt|zTXt".split(_templateObject); // Reserved Chunk Names

        // Data
        var W_MAX = 32; // bits / char
        var W_PAD = "0".repeat(W_MAX);
        var write = [].concat(_toConsumableArray($IN[1])).map(function (char) {
            return (W_PAD + char.charCodeAt().toString(2)).slice(-W_MAX);
        }).join(_templateObject2).split(_templateObject2);

        // Variables
        var read = $Parse.Signature($DATA).type,
            queue = read.length;

        var _loop = function (i) {
            if (i === queue) {
                var LENGTH = FixedReduce(LEN, function (index) {
                    return $DATA[i + index];
                }, 0);
                var TYPE = Array(TAG).fill().reduce(function (prev, _, iter) {
                    return prev + String.fromCharCode($DATA[i + iter + LEN]);
                }, "");

                if (TYPE !== "IEND") {
                    if (LENGTH !== 0) {
                        var sbit = i + LEN + TAG + LENGTH - 1,
                            sbyte = $DATA[sbit];
                        if (!RES.includes(TYPE) && sbyte && write.length) {
                            if (TYPE.indexOf("[object Object]")) console.log(String.fromCharCode($DATA[i + TYPE.indexOf("[object Object]") + LEN]));
                            $DATA[sbit] ^= (write.shift() ^ sbyte) & 1;
                        }
                    }
                    queue += LENGTH + TAG + PAD; // Next Chunk
                }
            }
            $OUT.Buffer = $DATA[i];
        };

        for (var i = 0; i < $DATA.length; i++) {
            _loop(i);
        }
        $OUT.Close(btoa(Array.prototype.reduce.call($DATA, function (prev, cur) {
            return prev + String.fromCharCode(cur);
        }, "")));
    }));
});

// 300

Filter.PNGSteg("https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png", "Example Text to Encode", [function (data, Stream) {
    console.log(Stream.Buffer);
    document.body.innerHTML += "<img src=\"data:image/png;base64," + data + "\">";
}]);